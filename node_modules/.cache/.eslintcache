[{"/Users/billysimmons/Desktop/UNI/TRI 1 2022/2702 - Intelligent Media Systems/Assessment /Assignment 2/Assignment 2/Final /moody-final/moody-app/src/index.js":"1","/Users/billysimmons/Desktop/UNI/TRI 1 2022/2702 - Intelligent Media Systems/Assessment /Assignment 2/Assignment 2/Final /moody-final/moody-app/src/App.js":"2","/Users/billysimmons/Desktop/UNI/TRI 1 2022/2702 - Intelligent Media Systems/Assessment /Assignment 2/Assignment 2/Final /moody-final/moody-app/src/reportWebVitals.js":"3","/Users/billysimmons/Desktop/UNI/TRI 1 2022/2702 - Intelligent Media Systems/Assessment /Assignment 2/Assignment 2/Final /moody-final/moody-app/src/SpotifyAuth.jsx":"4"},{"size":491,"mtime":1654234970306,"results":"5","hashOfConfig":"6"},{"size":208,"mtime":1654147153509,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1654146912097,"results":"8","hashOfConfig":"6"},{"size":10591,"mtime":1675078975376,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1npadte",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"23","usedDeprecatedRules":"24"},"/Users/billysimmons/Desktop/UNI/TRI 1 2022/2702 - Intelligent Media Systems/Assessment /Assignment 2/Assignment 2/Final /moody-final/moody-app/src/index.js",[],[],"/Users/billysimmons/Desktop/UNI/TRI 1 2022/2702 - Intelligent Media Systems/Assessment /Assignment 2/Assignment 2/Final /moody-final/moody-app/src/App.js",["25"],[],"import logo from './logo.svg';\nimport './App.css';\nimport SpotifyAuth from './SpotifyAuth';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SpotifyAuth />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/billysimmons/Desktop/UNI/TRI 1 2022/2702 - Intelligent Media Systems/Assessment /Assignment 2/Assignment 2/Final /moody-final/moody-app/src/reportWebVitals.js",[],[],"/Users/billysimmons/Desktop/UNI/TRI 1 2022/2702 - Intelligent Media Systems/Assessment /Assignment 2/Assignment 2/Final /moody-final/moody-app/src/SpotifyAuth.jsx",["26","27","28"],[],"import React from \"react\";\nimport { useState } from 'react';\n\n\n\n/*\nMOODY APPLICATION \n    Recommends songs based on selected mood, using a users spotify data\n\n\n    KNOWN ERRORS:\n        1. Must let it load fully before selecting mood\n        2. Errors appearing after selecting mood (could possibly be due to developer mode)\n*/\n\n\n\n/*\nSpotifyAuth FUNCTION\n    Main component for the application\n*/\nfunction SpotifyAuth() {\n    // Function variables\n    const CLIENT_SECRET = \"4da86a5ecc8043b89351f327c163334c\"\n    const CLIENT_ID = \"b9c6e006ac214ba695f8e0f09d8dc8e0\";\n    const REDIRECT_URI = \"http://localhost:3000\";\n    const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\";\n    const TOKEN = \"https://accounts.spotify.com/api/token\"\n    const [data, setData] = useState([]);\n    const [displayData, setDisplayData] = useState([]);\n\n    let accessToken = \"\";\n    let refreshToken = \"\";\n    let songIDArray = [];\n    let songDataArray = [];\n    let arr1 = [];\n    let arr2 = [];\n    let isLoggedin = false;\n    let isLoaded = false;\n    let gCode = \"\";\n\n\n    /*\n    RequestAuth FUNCTION\n        Requests authentication for moody app to access users spotify information (oAuth)\n    */\n    function requestAuth(){\n        localStorage.setItem(\"clientID\", CLIENT_ID);\n        localStorage.setItem(\"clientSecret\", CLIENT_SECRET)\n        let url = `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&response_type=code&redirect_uri=${REDIRECT_URI}&show_dialog=true&scope=user-read-private user-read-email user-modify-playback-state user-read-playback-position user-library-read streaming user-read-playback-state user-read-recently-played playlist-read-private`;\n        window.location.href = url;\n    }\n\n\n    if(new URLSearchParams(window.location.search).get(\"code\")){\n        handleRedirect();\n        isLoggedin = true;\n    } // Check if code is present in URL (means that they're loggin in)\n\n\n    /*\n    handleRedirect FUNCTION\n        Retrieves the code from the URL and assigns to variable gCode\n    */\n    function handleRedirect(){\n        let queryString = window.location.search;\n        if (queryString.length > 0){\n            let urlParams = new URLSearchParams(queryString);\n            gCode = urlParams.get('code');\n        }\n        callAuthorizationApi();\n    }\n  \n\n    /*\n    callAuthorizationApi FUNCTION\n        Spotify oAuth continued, retrieves access and refresh token using code \n    */\n    function callAuthorizationApi(){\n        let authParam = {\n            method: 'POST',\n            headers : {\n                'Content-Type' : 'application/x-www-form-urlencoded',\n                'Authorization' : 'Basic ' + btoa(CLIENT_ID + ':' + CLIENT_SECRET)\n            },\n            body : \"grant_type=authorization_code&code=\" + gCode + \"&redirect_uri=\" + REDIRECT_URI\n        } // Parameters for the following fetch request\n        \n        fetch(TOKEN, authParam)\n            .then(result => result.json())\n            .then((data) => {\n                accessToken = data.access_token;\n                localStorage.setItem(\"accessToken\", accessToken);\n                refreshToken = data.refresh_token;\n                localStorage.setItem(\"refreshToken\", refreshToken);\n                handleGetData();\n            }) // Fetch call using api/token endpoint to get refresh and access tokens, and sets to local storage\n    }\n\n\n    /*\n    handleGetData FUNCTION\n        Series of API calls to retrieve all songs in a user's playlist, and corresponding song data\n    */\n    async function handleGetData() {\n        let playlistParam = {\n            method : \"GET\",\n            headers : {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + accessToken\n            }\n        }; // Parameters for following playlist fetch \n\n        await fetch(\"https://api.spotify.com/v1/me/playlists\", playlistParam) // Fetch call to recieve all playlist information\n\n        .then(result => result.json())\n        .then(data => {\n            for (let i = 0; i < data.items.length; i++){\n                var playlistTracksParam = {\n                    method : \"GET\",\n                    headers : {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": \"Bearer \" + accessToken\n                    }\n                }; // Parameters for following playlist fetch \n    \n                fetch(data.items[i].tracks.href, playlistTracksParam)\n                .then(result => result.json())\n                .then(data => {\n                    for(let j = 0; j < data.items.length; j++){\n                        var songHref = data.items[i].track.href\n                        if (songHref.includes(\"track\")){\n                            // Assign song info\n                            let songID = data.items[j].track.id;\n                            let songName = data.items[j].track.name;\n                            let albumArt = data.items[j].track.album.images[2];\n                            let artist = data.items[j].track.artists[0].name;\n                            let songHref = `https://open.spotify.com/track/${songID}`\n                            songIDArray.push({songID, songName, albumArt, artist, songHref}); // Push into array for song information\n                        }\n                    }// Loop through all songs\n                })\n            }\n        })\n        setTimeout(getSongData, 1000); //Ensures loaded\n    };\n\n\n    /*\n    getSongData FUNCTION\n        Retrieves the song data required for mood sorting \n    */\n    function getSongData(){\n        songDataArray = songIDArray.sort((a, b) => 0.5 - Math.random()); //Randomise order of song info array\n        songDataArray = songDataArray.splice(0, 50); // Take the first 50 of randomised songs to account for API request rate\n        \n        for(let i = 0; i < songDataArray.length; i++){\n            var audioFeaturesParam = {\n                method : \"GET\",\n                headers : {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": \"Bearer \" + accessToken\n                }\n            }; // Parameters for following playlist fetch \n\n            fetch(\"https://api.spotify.com/v1/audio-features/\" + songDataArray[i].songID, audioFeaturesParam)\n            .then(result => result.json())\n            .then(data => {\n                songDataArray[i].songDanceability = data.danceability;\n                songDataArray[i].songEnergy = data.energy;\n                songDataArray[i].songValence = data.valence;\n            }) // Store danceability, energy, and valence values inside songDataArray\n\n\n        }\n        isLoaded = true;\n        setData(songDataArray); // songDataArray is set as state for future use\n    }\n\n\n    /*\n    happyDisplay FUNCTION\n        Sort for happy mood on button push\n    */\n    function happyDisplay(){\n        arr1 = [...data].sort((a, b) => b.songValence- a.songValence)\n        arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n        setDisplayData(arr2)\n    }\n\n\n    /*\n    sadDisplay FUNCTION\n        Sort for sad mood on button push\n    */\n    function sadDisplay(){\n        arr1 = [...data].sort((a, b) => a.songValence- b.songValence)\n        arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n        setDisplayData(arr2)\n    }\n\n\n    /*\n    danceDisplay FUNCTION\n        Sort for dance mood on button push\n    */\n    function danceDisplay(){\n        arr1 = [...data].sort((a, b) => b.songDanceability- a.songDanceability)\n        arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n        setDisplayData(arr2)\n    }\n\n\n    /*\n    chillDisplay FUNCTION\n        Sort for chill mood on button push\n    */\n    function chillDisplay(){\n        arr1 = [...data].sort((a, b) => a.songDanceability- b.songDanceability)\n        arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n\n        setDisplayData(arr2)\n    }\n\n\n    /*\n    logout FUNCTION\n        Called when logout button is pressed\n    */\n    function logout(){\n        isLoggedin = false; // Change html in return \n        window.location.href = REDIRECT_URI; // Reset URL\n        \n        // Reset local storage\n        localStorage.setItem(\"accessToken\", \"\");\n        localStorage.setItem(\"refreshToken\", \"\");\n        localStorage.setItem(\"clientID\", \"\");\n        localStorage.setItem(\"clientSecret\", \"\");\n    }\n\n    return (\n    <div className=\"App\">\n        <header className=\"App-header\">\n            {!isLoggedin &&\n                <div id=\"loginContainer\">\n                    <h1 id=\"welcomeMessage\" className=\"welcomeInfo\">Welcome to Moody!!</h1>\n                    <h3 className=\"welcomeInfo\">The app that determines which songs on Spotify to listen to based on your mood!!</h3>\n                    <h4 className=\"welcomeInfo\">Please login to your Spotify account to get started:</h4>\n                    <button id=\"loginButton\" onClick={requestAuth}>Login</button>\n                    <h6 className=\"welcomeInfo\">Note: This app uses Spotify's API and authentication to access your song data, please allow Moody permissions on the following screen</h6>\n                </div>\n            }\n            {(isLoggedin && !isLoaded) && \n                <>\n                    <div id=\"header\">\n                    <button id=\"logoutButton\" onClick={logout}>Logout</button>\n                        <h1>Moody</h1>\n                        <div id=\"buttonContainer\" >\n                            <button id=\"happyButton\"  className=\"moodButton\" onClick={happyDisplay}>Happy</button>\n                            <button id=\"sadButton\" className=\"moodButton\" onClick={sadDisplay}>Sad</button>\n                            <button id=\"danceButton\" className=\"moodButton\" onClick={danceDisplay}>Dance</button>\n                            <button id=\"chillButton\" className=\"moodButton\" onClick={chillDisplay}>Chill</button>\n                        </div>\n                    </div>\n                        {\n                            displayData.map(song => (\n                                <div id=\"songDisplayContainer\">\n                                    <div id=\"songDisplay\">\n                                        <img id=\"albumArt\" src={ song.albumArt.url } />\n                                        <a href={ song.songHref } target=\"_blank\" id=\"songNameHref\"><p id=\"songName\">{ song.songName } - { song.artist }</p></a>\n                                    </div>\n                                </div>\n\n                            ))\n                        }\n                </>\n            }\n\n        </header>\n    </div>\n  );\n};\n\nexport default SpotifyAuth;",[],{"ruleId":"29","severity":1,"message":"30","line":1,"column":8,"nodeType":"31","messageId":"32","endLine":1,"endColumn":12},{"ruleId":"33","severity":1,"message":"34","line":168,"column":19,"nodeType":"35","messageId":"36","endLine":172,"endColumn":14},{"ruleId":"37","severity":1,"message":"38","line":269,"column":41,"nodeType":"39","endLine":269,"endColumn":88},{"ruleId":"40","severity":1,"message":"41","line":270,"column":41,"nodeType":"39","messageId":"42","endLine":270,"endColumn":101,"fix":"43"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'songDataArray', 'songDataArray', 'songDataArray'.","ArrowFunctionExpression","unsafeRefs","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"44","text":"45"},[10289,10289]," rel=\"noreferrer\""]