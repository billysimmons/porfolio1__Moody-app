{"ast":null,"code":"var _jsxFileName = \"/Users/billysimmons/Desktop/UNI/TRI 1 2022/2702 - Intelligent Media Systems/Assessment /Assignment 2/Assignment 2/Final /moody-final/moody-app/src/SpotifyAuth.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport { useState } from 'react'; // Main Component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SpotifyAuth() {\n  _s();\n\n  // Variables\n  const CLIENT_SECRET = \"4da86a5ecc8043b89351f327c163334c\";\n  const CLIENT_ID = \"b9c6e006ac214ba695f8e0f09d8dc8e0\";\n  const REDIRECT_URI = \"http://localhost:3000\";\n  const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\";\n  const TOKEN = \"https://accounts.spotify.com/api/token\";\n  let accessToken = \"\";\n  let refreshToken = \"\";\n  let songIDArray = [];\n  let songDataArray = [];\n  let arr1 = [];\n  let arr2 = [];\n  let isLoggedin = false;\n  let isLoaded = false;\n  let gCode = \"\"; // useStates for storing data and sorted data from API calls\n\n  const [data, setData] = useState([]);\n  const [displayData, setDisplayData] = useState([]); // Request Spotify oAuth\n\n  function requestAuth() {\n    localStorage.setItem(\"clientID\", CLIENT_ID);\n    localStorage.setItem(\"clientSecret\", CLIENT_SECRET);\n    let url = `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&response_type=code&redirect_uri=${REDIRECT_URI}&show_dialog=true&scope=user-read-private user-read-email user-modify-playback-state user-read-playback-position user-library-read streaming user-read-playback-state user-read-recently-played playlist-read-private`;\n    window.location.href = url;\n  }\n\n  if (new URLSearchParams(window.location.search).get(\"code\")) {\n    handleRedirect();\n    isLoggedin = true;\n  } // Spotify oAuth\n\n\n  function handleRedirect() {\n    let code = null;\n    const queryString = window.location.search;\n\n    if (queryString.length > 0) {\n      const urlParams = new URLSearchParams(queryString);\n      code = urlParams.get('code');\n      gCode = code;\n    }\n\n    let url = `grant_type=authorization_code&code=${code}&redirect_uri=${REDIRECT_URI}&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`;\n    callAuthorizationApi(url);\n  } // Spotify oAuth continued - get accessToken\n\n\n  function callAuthorizationApi() {\n    let authParam = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + btoa(CLIENT_ID + ':' + CLIENT_SECRET)\n      },\n      body: \"grant_type=authorization_code&code=\" + gCode + \"&redirect_uri=\" + REDIRECT_URI\n    };\n    fetch(\"https://accounts.spotify.com/api/token\", authParam).then(result => result.json()).then(data => {\n      accessToken = data.access_token;\n      localStorage.setItem(\"accessToken\", accessToken);\n      refreshToken = data.refresh_token;\n      localStorage.setItem(\"refreshToken\", refreshToken);\n      handleGetData();\n    });\n  } // Series of API calls to retrieve all songs in a user's playlist, and corresponding song data\n\n\n  async function handleGetData() {\n    let playlistParam = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + accessToken\n      }\n    };\n    var playlist = await fetch(\"https://api.spotify.com/v1/me/playlists\", playlistParam).then(result => result.json()).then(data => {\n      for (let i = 0; i < data.items.length; i++) {\n        var playlistTracksParam = {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": \"Bearer \" + accessToken\n          }\n        };\n        fetch(data.items[i].tracks.href, playlistTracksParam).then(result => result.json()).then(data => {\n          for (let j = 0; j < data.items.length; j++) {\n            var songHref = data.items[i].track.href;\n\n            if (songHref.includes(\"track\")) {\n              let songID = data.items[j].track.id;\n              let songName = data.items[j].track.name;\n              let albumArt = data.items[j].track.album.images[2];\n              let artist = data.items[j].track.artists[0].name;\n              let songHref = `https://open.spotify.com/track/${songID}`;\n              songIDArray.push({\n                songID,\n                songName,\n                albumArt,\n                artist,\n                songHref\n              });\n            }\n          }\n        });\n      }\n    });\n    setTimeout(getSongData, 1000);\n  }\n\n  ;\n\n  async function getSongData() {\n    songDataArray = songIDArray.sort((a, b) => 0.5 - Math.random());\n    songDataArray = songDataArray.splice(0, 75);\n\n    for (let i = 0; i < songDataArray.length; i++) {\n      var audioFeaturesParam = {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"Bearer \" + accessToken\n        }\n      };\n      var audioFeatures = await fetch(\"https://api.spotify.com/v1/audio-features/\" + songDataArray[i].songID, audioFeaturesParam).then(result => result.json()).then(data => {\n        songDataArray[i].songDanceability = data.danceability;\n        songDataArray[i].songEnergy = data.energy;\n        songDataArray[i].songValence = data.valence;\n      }); // Store danceability, energy, and valence values inside songDataArray\n    }\n\n    isLoaded = true;\n    setData(songDataArray);\n  } // Sort for happy mood\n\n\n  function happyDisplay() {\n    arr1 = [...data].sort((a, b) => b.songValence - a.songValence);\n    arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]];\n    setDisplayData(arr2);\n  } // Sort for sad mood\n\n\n  function sadDisplay() {\n    arr1 = [...data].sort((a, b) => a.songValence - b.songValence);\n    arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]];\n    setDisplayData(arr2);\n  } // Sort for dance mood\n\n\n  function danceDisplay() {\n    arr1 = [...data].sort((a, b) => b.songDanceability - a.songDanceability);\n    arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]];\n    setDisplayData(arr2);\n  } // Sort for chill mood\n\n\n  function chillDisplay() {\n    arr1 = [...data].sort((a, b) => a.songDanceability - b.songDanceability);\n    arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]];\n    setDisplayData(arr2);\n  } // Logout \n\n\n  function logout() {\n    isLoggedin = false;\n    window.location.href = REDIRECT_URI;\n    localStorage.setItem(\"accessToken\", \"\");\n    localStorage.setItem(\"refreshToken\", \"\");\n    localStorage.setItem(\"clientID\", \"\");\n    localStorage.setItem(\"clientSecret\", \"\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [!isLoggedin && /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"loginContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          id: \"welcomeMessage\",\n          className: \"welcomeInfo\",\n          children: \"Welcome to Moody!!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"welcomeInfo\",\n          children: \"The app that determines which songs on Spotify to listen to based on your mood!!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"welcomeInfo\",\n          children: \"Please login to your Spotify account to get started:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"loginButton\",\n          onClick: requestAuth,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          className: \"welcomeInfo\",\n          children: \"Note: This app uses Spotify's API and authentication to access your song data, please allow Moody permissions on the following screen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this), isLoggedin && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"header\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"logoutButton\",\n            onClick: logout,\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Moody\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"buttonContainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"happyButton\",\n              className: \"moodButton\",\n              onClick: happyDisplay,\n              children: \"Happy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"sadButton\",\n              className: \"moodButton\",\n              onClick: sadDisplay,\n              children: \"Sad\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"danceButton\",\n              className: \"moodButton\",\n              onClick: danceDisplay,\n              children: \"Dance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"chillButton\",\n              className: \"moodButton\",\n              onClick: chillDisplay,\n              children: \"Chill\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }, this), displayData.map(song => /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"songDisplayContainer\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"songDisplay\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              id: \"albumArt\",\n              src: song.albumArt.url\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n              href: song.songHref,\n              target: \"_blank\",\n              id: \"songNameHref\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                id: \"songName\",\n                children: [song.songName, \" - \", song.artist]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 101\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 33\n        }, this))]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SpotifyAuth, \"jboDTUUme6DPXD+Rq5UGmyRacnw=\");\n\n_c = SpotifyAuth;\n;\nexport default SpotifyAuth; // import React from \"react\";\n// import axios from \"axios\";\n// import { useState } from 'react'\n// // Main Component\n// function SpotifyAuth() {\n//     // Variables\n//     const CLIENT_SECRET = \"4da86a5ecc8043b89351f327c163334c\"\n//     const CLIENT_ID = \"b9c6e006ac214ba695f8e0f09d8dc8e0\";\n//     const REDIRECT_URI = \"http://localhost:3000\";\n//     const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\";\n//     const TOKEN = \"https://accounts.spotify.com/api/token\"\n//     let accessToken = \"\";\n//     let refreshToken = \"\";\n//     let songIDArray = [];\n//     let songDataArray = [];\n//     let arr1 = [];\n//     let arr2 = [];\n//     let isLoggedin = false;\n//     // useStates for storing data and sorted data from API calls\n//     const [data, setData] = useState([])\n//     const [displayData, setDisplayData] = useState([])\n//   // Request Spotify oAuth\n//     function requestAuth(){\n//         localStorage.setItem(\"clientID\", CLIENT_ID);\n//         localStorage.setItem(\"clientSecret\", CLIENT_SECRET)\n//         let url = `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&response_type=code&redirect_uri=${REDIRECT_URI}&show_dialog=true&scope=user-read-private user-read-email user-modify-playback-state user-read-playback-position user-library-read streaming user-read-playback-state user-read-recently-played playlist-read-private`;\n//         window.location.href = url;\n//     }\n//     if(new URLSearchParams(window.location.search).get(\"code\")){\n//         handleRedirect();\n//         isLoggedin = true;\n//     }\n//     // Spotify oAuth\n//     function handleRedirect(){\n//         let code = null;\n//         const queryString = window.location.search;\n//         if (queryString.length > 0){\n//             const urlParams = new URLSearchParams(queryString)\n//             code = urlParams.get('code');\n//         }\n//         let url = `grant_type=authorization_code&code=${code}&redirect_uri=${REDIRECT_URI}&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`\n//         callAuthorizationApi(url)\n//     }\n//     // Spotify oAuth continued\n//     function callAuthorizationApi(url){\n//         let xhr = new XMLHttpRequest();\n//         xhr.open(\"POST\", TOKEN, true)\n//         xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n//         xhr.setRequestHeader(\"Authorization\", \"Basic \" + btoa(CLIENT_ID + \":\" + CLIENT_SECRET))\n//         xhr.send(url)\n//         xhr.onload = handleAuthorizationResponse;\n//     }\n//     // Spotify oAuth continued - get accessToken\n//     function handleAuthorizationResponse(){\n//         if (this.status === 200){\n//             var data = JSON.parse(this.responseText);\n//             if (data.access_token.length > 0){\n//                 accessToken = data.access_token;\n//                 localStorage.setItem(\"accessToken\", accessToken)\n//             }\n//             if (data.refresh_token.length > 0){\n//                 refreshToken = data.refresh_token;\n//                 localStorage.setItem(\"refreshToken\", refreshToken)\n//             } \n//             handleGetData();\n//         }\n//     }\n//     // Series of API calls to retrieve all songs in a user's playlist, and corresponding song data\n//     async function handleGetData() {\n//         axios.get(\"https://api.spotify.com/v1/me/playlists\", {\n//             headers: {\n//             Authorization: \"Bearer \" + accessToken,\n//             },\n//         })\n//         .then((response) => {\n//             for (let i = 0; i < response.data.items.length; i++) {\n//             axios.get(response.data.items[i].tracks.href, {\n//                 headers: {\n//                 Authorization: \"Bearer \" + accessToken,\n//                 },\n//             })\n//             .then((response) => {\n//                 for(let i = 0; i < response.data.items.length; i++){\n//                 const songHref = response.data.items[i].track.href\n//                 if (songHref.includes(\"track\")){\n//                     let songID = response.data.items[i].track.id;\n//                     let songName = response.data.items[i].track.name;\n//                     let albumArt = response.data.items[i].track.album.images[2];\n//                     let artist = response.data.items[i].track.artists[0].name;\n//                     let songHref = `https://open.spotify.com/track/${songID}`\n//                     songIDArray.push({songID, songName, albumArt, artist, songHref});\n//                 }\n//                 };\n//             })\n//             }\n//         })\n//         setTimeout(getSongData, 1000)\n//     };\n//     // Get audio features for each of the songs - had to be seperated due to restrictions on API calls per second\n//     async function getSongData(){\n//         songDataArray = songIDArray.sort((a, b) => 0.5 - Math.random());\n//         songDataArray.splice(0, 50)\n//         if (songDataArray.length = 50){\n//             for(let i = 0; i < songDataArray.length; i++){\n//                 axios.get(\"https://api.spotify.com/v1/audio-features/\" + songDataArray[i].songID, {\n//                     headers: {\n//                     Authorization: \"Bearer \" + accessToken,\n//                     },\n//                 })\n//                 // Store danceability, energy, and valence values inside songDataArray\n//                 .then((response) => {\n//                     songDataArray[i].songDanceability = response.data.danceability;\n//                     songDataArray[i].songEnergy = response.data.energy;\n//                     songDataArray[i].songValence = response.data.valence;\n//                 })\n//             }\n//             setData(songDataArray)\n//         }\n//     }\n//     // Sort for happy mood\n//     function happyDisplay(){\n//         arr1 = [...data].sort((a, b) => b.songValence- a.songValence)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n//         setDisplayData(arr2)\n//     }\n//     // Sort for sad mood\n//     function sadDisplay(){\n//         arr1 = [...data].sort((a, b) => a.songValence- b.songValence)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n//         setDisplayData(arr2)\n//     }\n//     // Sort for dance mood\n//     function danceDisplay(){\n//         arr1 = [...data].sort((a, b) => b.songDanceability- a.songDanceability)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n//         setDisplayData(arr2)\n//     }\n//     // Sort for chill mood\n//     function chillDisplay(){\n//         arr1 = [...data].sort((a, b) => a.songDanceability- b.songDanceability)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n//         setDisplayData(arr2)\n//     }\n//     // Logout \n//     function logout(){\n//         isLoggedin = false;\n//         window.location.href = REDIRECT_URI;\n//         localStorage.setItem(\"accessToken\", \"\")\n//         localStorage.setItem(\"refreshToken\", \"\")\n//         localStorage.setItem(\"clientID\", \"\");\n//         localStorage.setItem(\"clientSecret\", \"\")\n//     }\n//     return (\n//     <div className=\"App\">\n//         <header className=\"App-header\">\n//             {!isLoggedin &&\n//                 <div id=\"loginContainer\">\n//                     <h1 id=\"welcomeMessage\" className=\"welcomeInfo\">Welcome to Moody!!</h1>\n//                     <h3 className=\"welcomeInfo\">The app that determines which songs on Spotify to listen to based on your mood!!</h3>\n//                     <h4 className=\"welcomeInfo\">Please login to your Spotify account to get started:</h4>\n//                     <button id=\"loginButton\" onClick={requestAuth}>Login</button>\n//                     <h6 className=\"welcomeInfo\">Note: This app uses Spotify's API and authentication to access your song data, please allow Moody permissions on the following screen</h6>\n//                 </div>\n//             }\n//             {isLoggedin && \n//                 <>\n//                     <div id=\"header\">\n//                     <button id=\"logoutButton\" onClick={logout}>Logout</button>\n//                         <h1>Moody</h1>\n//                         <div id=\"buttonContainer\" >\n//                             <button id=\"happyButton\"  className=\"moodButton\" onClick={happyDisplay}>Happy</button>\n//                             <button id=\"sadButton\" className=\"moodButton\" onClick={sadDisplay}>Sad</button>\n//                             <button id=\"danceButton\" className=\"moodButton\" onClick={danceDisplay}>Dance</button>\n//                             <button id=\"chillButton\" className=\"moodButton\" onClick={chillDisplay}>Chill</button>\n//                         </div>\n//                     </div>\n//                         {\n//                             displayData.map(song => (\n//                                 <div id=\"songDisplayContainer\">\n//                                     <div id=\"songDisplay\">\n//                                         <img id=\"albumArt\" src={ song.albumArt.url } />\n//                                         <a href={ song.songHref } target=\"_blank\" id=\"songNameHref\"><p id=\"songName\">{ song.songName } - { song.artist }</p></a>\n//                                     </div>\n//                                 </div>\n//                             ))\n//                         }\n//                 </>\n//             }\n//         </header>\n//     </div>\n//   );\n// };\n// export default SpotifyAuth;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpotifyAuth\");","map":{"version":3,"names":["React","axios","useState","SpotifyAuth","CLIENT_SECRET","CLIENT_ID","REDIRECT_URI","AUTH_ENDPOINT","TOKEN","accessToken","refreshToken","songIDArray","songDataArray","arr1","arr2","isLoggedin","isLoaded","gCode","data","setData","displayData","setDisplayData","requestAuth","localStorage","setItem","url","window","location","href","URLSearchParams","search","get","handleRedirect","code","queryString","length","urlParams","callAuthorizationApi","authParam","method","headers","btoa","body","fetch","then","result","json","access_token","refresh_token","handleGetData","playlistParam","playlist","i","items","playlistTracksParam","tracks","j","songHref","track","includes","songID","id","songName","name","albumArt","album","images","artist","artists","push","setTimeout","getSongData","sort","a","b","Math","random","splice","audioFeaturesParam","audioFeatures","songDanceability","danceability","songEnergy","energy","songValence","valence","happyDisplay","sadDisplay","danceDisplay","chillDisplay","logout","map","song"],"sources":["/Users/billysimmons/Desktop/UNI/TRI 1 2022/2702 - Intelligent Media Systems/Assessment /Assignment 2/Assignment 2/Final /moody-final/moody-app/src/SpotifyAuth.jsx"],"sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { useState } from 'react'\n\n// Main Component\nfunction SpotifyAuth() {\n    // Variables\n    const CLIENT_SECRET = \"4da86a5ecc8043b89351f327c163334c\"\n    const CLIENT_ID = \"b9c6e006ac214ba695f8e0f09d8dc8e0\";\n    const REDIRECT_URI = \"http://localhost:3000\";\n    const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\";\n    const TOKEN = \"https://accounts.spotify.com/api/token\"\n    let accessToken = \"\";\n    let refreshToken = \"\";\n    let songIDArray = [];\n    let songDataArray = [];\n    let arr1 = [];\n    let arr2 = [];\n    let isLoggedin = false;\n    let isLoaded = false;\n    let gCode = \"\";\n\n    // useStates for storing data and sorted data from API calls\n    const [data, setData] = useState([])\n    const [displayData, setDisplayData] = useState([])\n  \n  // Request Spotify oAuth\n    function requestAuth(){\n        localStorage.setItem(\"clientID\", CLIENT_ID);\n        localStorage.setItem(\"clientSecret\", CLIENT_SECRET)\n        let url = `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&response_type=code&redirect_uri=${REDIRECT_URI}&show_dialog=true&scope=user-read-private user-read-email user-modify-playback-state user-read-playback-position user-library-read streaming user-read-playback-state user-read-recently-played playlist-read-private`;\n        window.location.href = url;\n    }\n\n    if(new URLSearchParams(window.location.search).get(\"code\")){\n        handleRedirect();\n        isLoggedin = true;\n\n    }\n\n    // Spotify oAuth\n    function handleRedirect(){\n        let code = null;\n        const queryString = window.location.search;\n        if (queryString.length > 0){\n            const urlParams = new URLSearchParams(queryString)\n            code = urlParams.get('code');\n            gCode = code;\n        }\n        let url = `grant_type=authorization_code&code=${code}&redirect_uri=${REDIRECT_URI}&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`\n        callAuthorizationApi(url)\n    }\n  \n\n    // Spotify oAuth continued - get accessToken\n    function callAuthorizationApi(){\n\n        let authParam = {\n            method: 'POST',\n            headers : {\n                'Content-Type' : 'application/x-www-form-urlencoded',\n                'Authorization' : 'Basic ' + btoa(CLIENT_ID + ':' + CLIENT_SECRET)\n            },\n            body : \"grant_type=authorization_code&code=\" + gCode + \"&redirect_uri=\" + REDIRECT_URI\n        };\n        fetch(\"https://accounts.spotify.com/api/token\", authParam)\n            .then(result => result.json())\n            .then((data) => {\n                accessToken = data.access_token;\n                localStorage.setItem(\"accessToken\", accessToken);\n                refreshToken = data.refresh_token;\n                localStorage.setItem(\"refreshToken\", refreshToken);\n                handleGetData();\n            })\n            \n        \n        \n\n        \n    }\n\n    // Series of API calls to retrieve all songs in a user's playlist, and corresponding song data\n    async function handleGetData() {\n        let playlistParam = {\n            method : \"GET\",\n            headers : {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + accessToken\n            }\n        }\n\n        var playlist = await fetch(\"https://api.spotify.com/v1/me/playlists\", playlistParam)\n\n        .then(result => result.json())\n        .then(data => {\n            for (let i = 0; i < data.items.length; i++){\n\n                var playlistTracksParam = {\n                    method : \"GET\",\n                    headers : {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": \"Bearer \" + accessToken\n                    }\n                }\n    \n                fetch(data.items[i].tracks.href, playlistTracksParam)\n                .then(result => result.json())\n                .then(data => {\n                    for(let j = 0; j < data.items.length; j++){\n                        var songHref = data.items[i].track.href\n                        if (songHref.includes(\"track\")){\n                            let songID = data.items[j].track.id;\n                            let songName = data.items[j].track.name;\n                            let albumArt = data.items[j].track.album.images[2];\n                            let artist = data.items[j].track.artists[0].name;\n                            let songHref = `https://open.spotify.com/track/${songID}`\n                            songIDArray.push({songID, songName, albumArt, artist, songHref});\n                        }\n                    }\n                })\n            } \n        })\n        setTimeout(getSongData, 1000)\n    };\n\n\n\n    async function getSongData(){\n        songDataArray = songIDArray.sort((a, b) => 0.5 - Math.random());\n        songDataArray = songDataArray.splice(0, 75);\n\n        for(let i = 0; i < songDataArray.length; i++){\n\n            var audioFeaturesParam = {\n                method : \"GET\",\n                headers : {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": \"Bearer \" + accessToken\n                }\n            }\n\n            var audioFeatures = await fetch(\"https://api.spotify.com/v1/audio-features/\" + songDataArray[i].songID, audioFeaturesParam)\n            .then(result => result.json())\n            .then(data => {\n                songDataArray[i].songDanceability = data.danceability;\n                songDataArray[i].songEnergy = data.energy;\n                songDataArray[i].songValence = data.valence;\n            }) // Store danceability, energy, and valence values inside songDataArray\n\n\n        }\n        isLoaded = true;\n\n        setData(songDataArray);\n\n        \n    }\n\n\n    // Sort for happy mood\n    function happyDisplay(){\n        arr1 = [...data].sort((a, b) => b.songValence- a.songValence)\n        arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n\n        setDisplayData(arr2)\n    }\n\n    // Sort for sad mood\n    function sadDisplay(){\n        arr1 = [...data].sort((a, b) => a.songValence- b.songValence)\n        arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n\n        setDisplayData(arr2)\n    }\n\n    // Sort for dance mood\n    function danceDisplay(){\n        arr1 = [...data].sort((a, b) => b.songDanceability- a.songDanceability)\n        arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n\n        setDisplayData(arr2)\n    }\n\n    // Sort for chill mood\n    function chillDisplay(){\n        arr1 = [...data].sort((a, b) => a.songDanceability- b.songDanceability)\n        arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n\n        setDisplayData(arr2)\n    }\n\n    // Logout \n    function logout(){\n        isLoggedin = false;\n        window.location.href = REDIRECT_URI;\n        localStorage.setItem(\"accessToken\", \"\")\n        localStorage.setItem(\"refreshToken\", \"\")\n        localStorage.setItem(\"clientID\", \"\");\n        localStorage.setItem(\"clientSecret\", \"\")\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    return (\n    <div className=\"App\">\n        <header className=\"App-header\">\n            {!isLoggedin &&\n                <div id=\"loginContainer\">\n                    <h1 id=\"welcomeMessage\" className=\"welcomeInfo\">Welcome to Moody!!</h1>\n                    <h3 className=\"welcomeInfo\">The app that determines which songs on Spotify to listen to based on your mood!!</h3>\n                    <h4 className=\"welcomeInfo\">Please login to your Spotify account to get started:</h4>\n                    <button id=\"loginButton\" onClick={requestAuth}>Login</button>\n                    <h6 className=\"welcomeInfo\">Note: This app uses Spotify's API and authentication to access your song data, please allow Moody permissions on the following screen</h6>\n\n                </div>\n\n            }\n            {isLoggedin && \n                <>\n                    <div id=\"header\">\n                    <button id=\"logoutButton\" onClick={logout}>Logout</button>\n                        <h1>Moody</h1>\n                        <div id=\"buttonContainer\" >\n                            <button id=\"happyButton\"  className=\"moodButton\" onClick={happyDisplay}>Happy</button>\n                            <button id=\"sadButton\" className=\"moodButton\" onClick={sadDisplay}>Sad</button>\n                            <button id=\"danceButton\" className=\"moodButton\" onClick={danceDisplay}>Dance</button>\n                            <button id=\"chillButton\" className=\"moodButton\" onClick={chillDisplay}>Chill</button>\n                        </div>\n                    </div>\n                        {\n                            displayData.map(song => (\n                                <div id=\"songDisplayContainer\">\n                                    <div id=\"songDisplay\">\n                                        <img id=\"albumArt\" src={ song.albumArt.url } />\n                                        <a href={ song.songHref } target=\"_blank\" id=\"songNameHref\"><p id=\"songName\">{ song.songName } - { song.artist }</p></a>\n                                    </div>\n                                </div>\n\n                            ))\n                        }\n                </>\n            }\n        </header>\n    </div>\n  );\n};\n\nexport default SpotifyAuth;\n\n\n\n\n\n\n\n// import React from \"react\";\n// import axios from \"axios\";\n// import { useState } from 'react'\n\n// // Main Component\n// function SpotifyAuth() {\n//     // Variables\n//     const CLIENT_SECRET = \"4da86a5ecc8043b89351f327c163334c\"\n//     const CLIENT_ID = \"b9c6e006ac214ba695f8e0f09d8dc8e0\";\n//     const REDIRECT_URI = \"http://localhost:3000\";\n//     const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\";\n//     const TOKEN = \"https://accounts.spotify.com/api/token\"\n//     let accessToken = \"\";\n//     let refreshToken = \"\";\n//     let songIDArray = [];\n//     let songDataArray = [];\n//     let arr1 = [];\n//     let arr2 = [];\n//     let isLoggedin = false;\n\n//     // useStates for storing data and sorted data from API calls\n//     const [data, setData] = useState([])\n//     const [displayData, setDisplayData] = useState([])\n  \n//   // Request Spotify oAuth\n//     function requestAuth(){\n//         localStorage.setItem(\"clientID\", CLIENT_ID);\n//         localStorage.setItem(\"clientSecret\", CLIENT_SECRET)\n//         let url = `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&response_type=code&redirect_uri=${REDIRECT_URI}&show_dialog=true&scope=user-read-private user-read-email user-modify-playback-state user-read-playback-position user-library-read streaming user-read-playback-state user-read-recently-played playlist-read-private`;\n//         window.location.href = url;\n//     }\n\n//     if(new URLSearchParams(window.location.search).get(\"code\")){\n//         handleRedirect();\n//         isLoggedin = true;\n\n//     }\n\n//     // Spotify oAuth\n//     function handleRedirect(){\n//         let code = null;\n//         const queryString = window.location.search;\n//         if (queryString.length > 0){\n//             const urlParams = new URLSearchParams(queryString)\n//             code = urlParams.get('code');\n//         }\n//         let url = `grant_type=authorization_code&code=${code}&redirect_uri=${REDIRECT_URI}&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`\n//         callAuthorizationApi(url)\n//     }\n  \n//     // Spotify oAuth continued\n//     function callAuthorizationApi(url){\n//         let xhr = new XMLHttpRequest();\n//         xhr.open(\"POST\", TOKEN, true)\n//         xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n//         xhr.setRequestHeader(\"Authorization\", \"Basic \" + btoa(CLIENT_ID + \":\" + CLIENT_SECRET))\n//         xhr.send(url)\n//         xhr.onload = handleAuthorizationResponse;\n//     }\n\n//     // Spotify oAuth continued - get accessToken\n//     function handleAuthorizationResponse(){\n//         if (this.status === 200){\n//             var data = JSON.parse(this.responseText);\n//             if (data.access_token.length > 0){\n//                 accessToken = data.access_token;\n//                 localStorage.setItem(\"accessToken\", accessToken)\n//             }\n//             if (data.refresh_token.length > 0){\n//                 refreshToken = data.refresh_token;\n//                 localStorage.setItem(\"refreshToken\", refreshToken)\n\n//             } \n//             handleGetData();\n//         }\n//     }\n\n//     // Series of API calls to retrieve all songs in a user's playlist, and corresponding song data\n//     async function handleGetData() {\n//         axios.get(\"https://api.spotify.com/v1/me/playlists\", {\n//             headers: {\n//             Authorization: \"Bearer \" + accessToken,\n//             },\n//         })\n//         .then((response) => {\n//             for (let i = 0; i < response.data.items.length; i++) {\n//             axios.get(response.data.items[i].tracks.href, {\n//                 headers: {\n//                 Authorization: \"Bearer \" + accessToken,\n//                 },\n//             })\n//             .then((response) => {\n//                 for(let i = 0; i < response.data.items.length; i++){\n//                 const songHref = response.data.items[i].track.href\n//                 if (songHref.includes(\"track\")){\n//                     let songID = response.data.items[i].track.id;\n//                     let songName = response.data.items[i].track.name;\n//                     let albumArt = response.data.items[i].track.album.images[2];\n//                     let artist = response.data.items[i].track.artists[0].name;\n//                     let songHref = `https://open.spotify.com/track/${songID}`\n//                     songIDArray.push({songID, songName, albumArt, artist, songHref});\n//                 }\n//                 };\n//             })\n//             }\n//         })\n//         setTimeout(getSongData, 1000)\n//     };\n\n//     // Get audio features for each of the songs - had to be seperated due to restrictions on API calls per second\n//     async function getSongData(){\n//         songDataArray = songIDArray.sort((a, b) => 0.5 - Math.random());\n//         songDataArray.splice(0, 50)\n//         if (songDataArray.length = 50){\n//             for(let i = 0; i < songDataArray.length; i++){\n//                 axios.get(\"https://api.spotify.com/v1/audio-features/\" + songDataArray[i].songID, {\n//                     headers: {\n//                     Authorization: \"Bearer \" + accessToken,\n//                     },\n//                 })\n//                 // Store danceability, energy, and valence values inside songDataArray\n//                 .then((response) => {\n//                     songDataArray[i].songDanceability = response.data.danceability;\n//                     songDataArray[i].songEnergy = response.data.energy;\n//                     songDataArray[i].songValence = response.data.valence;\n//                 })\n//             }\n//             setData(songDataArray)\n//         }\n//     }\n\n//     // Sort for happy mood\n//     function happyDisplay(){\n//         arr1 = [...data].sort((a, b) => b.songValence- a.songValence)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n\n//         setDisplayData(arr2)\n//     }\n\n//     // Sort for sad mood\n//     function sadDisplay(){\n//         arr1 = [...data].sort((a, b) => a.songValence- b.songValence)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n\n//         setDisplayData(arr2)\n//     }\n\n//     // Sort for dance mood\n//     function danceDisplay(){\n//         arr1 = [...data].sort((a, b) => b.songDanceability- a.songDanceability)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n\n//         setDisplayData(arr2)\n//     }\n\n//     // Sort for chill mood\n//     function chillDisplay(){\n//         arr1 = [...data].sort((a, b) => a.songDanceability- b.songDanceability)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n\n//         setDisplayData(arr2)\n//     }\n\n//     // Logout \n//     function logout(){\n//         isLoggedin = false;\n//         window.location.href = REDIRECT_URI;\n//         localStorage.setItem(\"accessToken\", \"\")\n//         localStorage.setItem(\"refreshToken\", \"\")\n//         localStorage.setItem(\"clientID\", \"\");\n//         localStorage.setItem(\"clientSecret\", \"\")\n//     }\n\n//     return (\n//     <div className=\"App\">\n//         <header className=\"App-header\">\n//             {!isLoggedin &&\n//                 <div id=\"loginContainer\">\n//                     <h1 id=\"welcomeMessage\" className=\"welcomeInfo\">Welcome to Moody!!</h1>\n//                     <h3 className=\"welcomeInfo\">The app that determines which songs on Spotify to listen to based on your mood!!</h3>\n//                     <h4 className=\"welcomeInfo\">Please login to your Spotify account to get started:</h4>\n//                     <button id=\"loginButton\" onClick={requestAuth}>Login</button>\n//                     <h6 className=\"welcomeInfo\">Note: This app uses Spotify's API and authentication to access your song data, please allow Moody permissions on the following screen</h6>\n\n//                 </div>\n\n//             }\n//             {isLoggedin && \n//                 <>\n//                     <div id=\"header\">\n//                     <button id=\"logoutButton\" onClick={logout}>Logout</button>\n//                         <h1>Moody</h1>\n//                         <div id=\"buttonContainer\" >\n//                             <button id=\"happyButton\"  className=\"moodButton\" onClick={happyDisplay}>Happy</button>\n//                             <button id=\"sadButton\" className=\"moodButton\" onClick={sadDisplay}>Sad</button>\n//                             <button id=\"danceButton\" className=\"moodButton\" onClick={danceDisplay}>Dance</button>\n//                             <button id=\"chillButton\" className=\"moodButton\" onClick={chillDisplay}>Chill</button>\n//                         </div>\n//                     </div>\n//                         {\n//                             displayData.map(song => (\n//                                 <div id=\"songDisplayContainer\">\n//                                     <div id=\"songDisplay\">\n//                                         <img id=\"albumArt\" src={ song.albumArt.url } />\n//                                         <a href={ song.songHref } target=\"_blank\" id=\"songNameHref\"><p id=\"songName\">{ song.songName } - { song.artist }</p></a>\n//                                     </div>\n//                                 </div>\n\n//                             ))\n//                         }\n//                 </>\n//             }\n//         </header>\n//     </div>\n//   );\n// };\n\n// export default SpotifyAuth;"],"mappings":"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},"metadata":{},"sourceType":"module"}