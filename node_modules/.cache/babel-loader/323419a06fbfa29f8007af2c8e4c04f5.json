{"ast":null,"code":"var _jsxFileName = \"/Users/billysimmons/Desktop/UNI/TRI 1 2022/2702 - Intelligent Media Systems/Assessment /Assignment 2/Assignment 2/Final /moody-final/moody-app/src/SpotifyAuth.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport { useState } from 'react'; // Main Component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SpotifyAuth() {\n  _s();\n\n  // Variables\n  const CLIENT_SECRET = \"4da86a5ecc8043b89351f327c163334c\";\n  const CLIENT_ID = \"b9c6e006ac214ba695f8e0f09d8dc8e0\";\n  const REDIRECT_URI = \"http://localhost:3000\";\n  const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\";\n  const TOKEN = \"https://accounts.spotify.com/api/token\";\n  let accessToken = \"\";\n  let refreshToken = \"\";\n  let songIDArray = [];\n  let songDataArray = [];\n  let arr1 = [];\n  let arr2 = [];\n  let isLoggedin = false;\n  let gCode = \"\"; // useStates for storing data and sorted data from API calls\n\n  const [data, setData] = useState([]);\n  const [displayData, setDisplayData] = useState([]); // Request Spotify oAuth\n\n  function requestAuth() {\n    localStorage.setItem(\"clientID\", CLIENT_ID);\n    localStorage.setItem(\"clientSecret\", CLIENT_SECRET);\n    let url = `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&response_type=code&redirect_uri=${REDIRECT_URI}&show_dialog=true&scope=user-read-private user-read-email user-modify-playback-state user-read-playback-position user-library-read streaming user-read-playback-state user-read-recently-played playlist-read-private`;\n    window.location.href = url;\n  }\n\n  if (new URLSearchParams(window.location.search).get(\"code\")) {\n    handleRedirect();\n    isLoggedin = true;\n  } // Spotify oAuth\n\n\n  function handleRedirect() {\n    let code = null;\n    const queryString = window.location.search;\n\n    if (queryString.length > 0) {\n      const urlParams = new URLSearchParams(queryString);\n      code = urlParams.get('code');\n      gCode = code;\n    }\n\n    let url = `grant_type=authorization_code&code=${code}&redirect_uri=${REDIRECT_URI}&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`;\n    callAuthorizationApi(url);\n  } // Spotify oAuth continued - get accessToken\n\n\n  function callAuthorizationApi() {\n    let authParam = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + btoa(CLIENT_ID + ':' + CLIENT_SECRET)\n      },\n      body: \"grant_type=authorization_code&code=\" + gCode + \"&redirect_uri=\" + REDIRECT_URI\n    };\n    fetch(\"https://accounts.spotify.com/api/token\", authParam).then(result => result.json()).then(data => {\n      accessToken = data.access_token;\n      localStorage.setItem(\"accessToken\", accessToken);\n      refreshToken = data.refresh_token;\n      localStorage.setItem(\"refreshToken\", refreshToken);\n    });\n    handleGetData();\n  } // Series of API calls to retrieve all songs in a user's playlist, and corresponding song data\n\n\n  async function handleGetData() {\n    axios.get(\"https://api.spotify.com/v1/me/playlists\", {\n      headers: {\n        Authorization: \"Bearer \" + accessToken\n      }\n    }).then(data => console.log(data));\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [!isLoggedin && /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"loginContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          id: \"welcomeMessage\",\n          className: \"welcomeInfo\",\n          children: \"Welcome to Moody!!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"welcomeInfo\",\n          children: \"The app that determines which songs on Spotify to listen to based on your mood!!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"welcomeInfo\",\n          children: \"Please login to your Spotify account to get started:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"loginButton\",\n          onClick: requestAuth,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          className: \"welcomeInfo\",\n          children: \"Note: This app uses Spotify's API and authentication to access your song data, please allow Moody permissions on the following screen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), isLoggedin && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"header\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"logoutButton\",\n            onClick: logout,\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Moody\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"buttonContainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"happyButton\",\n              className: \"moodButton\",\n              onClick: happyDisplay,\n              children: \"Happy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"sadButton\",\n              className: \"moodButton\",\n              onClick: sadDisplay,\n              children: \"Sad\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"danceButton\",\n              className: \"moodButton\",\n              onClick: danceDisplay,\n              children: \"Dance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"chillButton\",\n              className: \"moodButton\",\n              onClick: chillDisplay,\n              children: \"Chill\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), displayData.map(song => /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"songDisplayContainer\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"songDisplay\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              id: \"albumArt\",\n              src: song.albumArt.url\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n              href: song.songHref,\n              target: \"_blank\",\n              id: \"songNameHref\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                id: \"songName\",\n                children: [song.songName, \" - \", song.artist]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 101\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 33\n        }, this))]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SpotifyAuth, \"jboDTUUme6DPXD+Rq5UGmyRacnw=\");\n\n_c = SpotifyAuth;\n;\nexport default SpotifyAuth; // import React from \"react\";\n// import axios from \"axios\";\n// import { useState } from 'react'\n// // Main Component\n// function SpotifyAuth() {\n//     // Variables\n//     const CLIENT_SECRET = \"4da86a5ecc8043b89351f327c163334c\"\n//     const CLIENT_ID = \"b9c6e006ac214ba695f8e0f09d8dc8e0\";\n//     const REDIRECT_URI = \"http://localhost:3000\";\n//     const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\";\n//     const TOKEN = \"https://accounts.spotify.com/api/token\"\n//     let accessToken = \"\";\n//     let refreshToken = \"\";\n//     let songIDArray = [];\n//     let songDataArray = [];\n//     let arr1 = [];\n//     let arr2 = [];\n//     let isLoggedin = false;\n//     // useStates for storing data and sorted data from API calls\n//     const [data, setData] = useState([])\n//     const [displayData, setDisplayData] = useState([])\n//   // Request Spotify oAuth\n//     function requestAuth(){\n//         localStorage.setItem(\"clientID\", CLIENT_ID);\n//         localStorage.setItem(\"clientSecret\", CLIENT_SECRET)\n//         let url = `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&response_type=code&redirect_uri=${REDIRECT_URI}&show_dialog=true&scope=user-read-private user-read-email user-modify-playback-state user-read-playback-position user-library-read streaming user-read-playback-state user-read-recently-played playlist-read-private`;\n//         window.location.href = url;\n//     }\n//     if(new URLSearchParams(window.location.search).get(\"code\")){\n//         handleRedirect();\n//         isLoggedin = true;\n//     }\n//     // Spotify oAuth\n//     function handleRedirect(){\n//         let code = null;\n//         const queryString = window.location.search;\n//         if (queryString.length > 0){\n//             const urlParams = new URLSearchParams(queryString)\n//             code = urlParams.get('code');\n//         }\n//         let url = `grant_type=authorization_code&code=${code}&redirect_uri=${REDIRECT_URI}&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`\n//         callAuthorizationApi(url)\n//     }\n//     // Spotify oAuth continued\n//     function callAuthorizationApi(url){\n//         let xhr = new XMLHttpRequest();\n//         xhr.open(\"POST\", TOKEN, true)\n//         xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n//         xhr.setRequestHeader(\"Authorization\", \"Basic \" + btoa(CLIENT_ID + \":\" + CLIENT_SECRET))\n//         xhr.send(url)\n//         xhr.onload = handleAuthorizationResponse;\n//     }\n//     // Spotify oAuth continued - get accessToken\n//     function handleAuthorizationResponse(){\n//         if (this.status === 200){\n//             var data = JSON.parse(this.responseText);\n//             if (data.access_token.length > 0){\n//                 accessToken = data.access_token;\n//                 localStorage.setItem(\"accessToken\", accessToken)\n//             }\n//             if (data.refresh_token.length > 0){\n//                 refreshToken = data.refresh_token;\n//                 localStorage.setItem(\"refreshToken\", refreshToken)\n//             } \n//             handleGetData();\n//         }\n//     }\n//     // Series of API calls to retrieve all songs in a user's playlist, and corresponding song data\n//     async function handleGetData() {\n//         axios.get(\"https://api.spotify.com/v1/me/playlists\", {\n//             headers: {\n//             Authorization: \"Bearer \" + accessToken,\n//             },\n//         })\n//         .then((response) => {\n//             for (let i = 0; i < response.data.items.length; i++) {\n//             axios.get(response.data.items[i].tracks.href, {\n//                 headers: {\n//                 Authorization: \"Bearer \" + accessToken,\n//                 },\n//             })\n//             .then((response) => {\n//                 for(let i = 0; i < response.data.items.length; i++){\n//                 const songHref = response.data.items[i].track.href\n//                 if (songHref.includes(\"track\")){\n//                     let songID = response.data.items[i].track.id;\n//                     let songName = response.data.items[i].track.name;\n//                     let albumArt = response.data.items[i].track.album.images[2];\n//                     let artist = response.data.items[i].track.artists[0].name;\n//                     let songHref = `https://open.spotify.com/track/${songID}`\n//                     songIDArray.push({songID, songName, albumArt, artist, songHref});\n//                 }\n//                 };\n//             })\n//             }\n//         })\n//         setTimeout(getSongData, 1000)\n//     };\n//     // Get audio features for each of the songs - had to be seperated due to restrictions on API calls per second\n//     async function getSongData(){\n//         songDataArray = songIDArray.sort((a, b) => 0.5 - Math.random());\n//         songDataArray.splice(0, 50)\n//         if (songDataArray.length = 50){\n//             for(let i = 0; i < songDataArray.length; i++){\n//                 axios.get(\"https://api.spotify.com/v1/audio-features/\" + songDataArray[i].songID, {\n//                     headers: {\n//                     Authorization: \"Bearer \" + accessToken,\n//                     },\n//                 })\n//                 // Store danceability, energy, and valence values inside songDataArray\n//                 .then((response) => {\n//                     songDataArray[i].songDanceability = response.data.danceability;\n//                     songDataArray[i].songEnergy = response.data.energy;\n//                     songDataArray[i].songValence = response.data.valence;\n//                 })\n//             }\n//             setData(songDataArray)\n//         }\n//     }\n//     // Sort for happy mood\n//     function happyDisplay(){\n//         arr1 = [...data].sort((a, b) => b.songValence- a.songValence)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n//         setDisplayData(arr2)\n//     }\n//     // Sort for sad mood\n//     function sadDisplay(){\n//         arr1 = [...data].sort((a, b) => a.songValence- b.songValence)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n//         setDisplayData(arr2)\n//     }\n//     // Sort for dance mood\n//     function danceDisplay(){\n//         arr1 = [...data].sort((a, b) => b.songDanceability- a.songDanceability)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n//         setDisplayData(arr2)\n//     }\n//     // Sort for chill mood\n//     function chillDisplay(){\n//         arr1 = [...data].sort((a, b) => a.songDanceability- b.songDanceability)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n//         setDisplayData(arr2)\n//     }\n//     // Logout \n//     function logout(){\n//         isLoggedin = false;\n//         window.location.href = REDIRECT_URI;\n//         localStorage.setItem(\"accessToken\", \"\")\n//         localStorage.setItem(\"refreshToken\", \"\")\n//         localStorage.setItem(\"clientID\", \"\");\n//         localStorage.setItem(\"clientSecret\", \"\")\n//     }\n//     return (\n//     <div className=\"App\">\n//         <header className=\"App-header\">\n//             {!isLoggedin &&\n//                 <div id=\"loginContainer\">\n//                     <h1 id=\"welcomeMessage\" className=\"welcomeInfo\">Welcome to Moody!!</h1>\n//                     <h3 className=\"welcomeInfo\">The app that determines which songs on Spotify to listen to based on your mood!!</h3>\n//                     <h4 className=\"welcomeInfo\">Please login to your Spotify account to get started:</h4>\n//                     <button id=\"loginButton\" onClick={requestAuth}>Login</button>\n//                     <h6 className=\"welcomeInfo\">Note: This app uses Spotify's API and authentication to access your song data, please allow Moody permissions on the following screen</h6>\n//                 </div>\n//             }\n//             {isLoggedin && \n//                 <>\n//                     <div id=\"header\">\n//                     <button id=\"logoutButton\" onClick={logout}>Logout</button>\n//                         <h1>Moody</h1>\n//                         <div id=\"buttonContainer\" >\n//                             <button id=\"happyButton\"  className=\"moodButton\" onClick={happyDisplay}>Happy</button>\n//                             <button id=\"sadButton\" className=\"moodButton\" onClick={sadDisplay}>Sad</button>\n//                             <button id=\"danceButton\" className=\"moodButton\" onClick={danceDisplay}>Dance</button>\n//                             <button id=\"chillButton\" className=\"moodButton\" onClick={chillDisplay}>Chill</button>\n//                         </div>\n//                     </div>\n//                         {\n//                             displayData.map(song => (\n//                                 <div id=\"songDisplayContainer\">\n//                                     <div id=\"songDisplay\">\n//                                         <img id=\"albumArt\" src={ song.albumArt.url } />\n//                                         <a href={ song.songHref } target=\"_blank\" id=\"songNameHref\"><p id=\"songName\">{ song.songName } - { song.artist }</p></a>\n//                                     </div>\n//                                 </div>\n//                             ))\n//                         }\n//                 </>\n//             }\n//         </header>\n//     </div>\n//   );\n// };\n// export default SpotifyAuth;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpotifyAuth\");","map":{"version":3,"names":["React","axios","useState","SpotifyAuth","CLIENT_SECRET","CLIENT_ID","REDIRECT_URI","AUTH_ENDPOINT","TOKEN","accessToken","refreshToken","songIDArray","songDataArray","arr1","arr2","isLoggedin","gCode","data","setData","displayData","setDisplayData","requestAuth","localStorage","setItem","url","window","location","href","URLSearchParams","search","get","handleRedirect","code","queryString","length","urlParams","callAuthorizationApi","authParam","method","headers","btoa","body","fetch","then","result","json","access_token","refresh_token","handleGetData","Authorization","console","log","logout","happyDisplay","sadDisplay","danceDisplay","chillDisplay","map","song","albumArt","songHref","songName","artist"],"sources":["/Users/billysimmons/Desktop/UNI/TRI 1 2022/2702 - Intelligent Media Systems/Assessment /Assignment 2/Assignment 2/Final /moody-final/moody-app/src/SpotifyAuth.jsx"],"sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { useState } from 'react'\n\n// Main Component\nfunction SpotifyAuth() {\n    // Variables\n    const CLIENT_SECRET = \"4da86a5ecc8043b89351f327c163334c\"\n    const CLIENT_ID = \"b9c6e006ac214ba695f8e0f09d8dc8e0\";\n    const REDIRECT_URI = \"http://localhost:3000\";\n    const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\";\n    const TOKEN = \"https://accounts.spotify.com/api/token\"\n    let accessToken = \"\";\n    let refreshToken = \"\";\n    let songIDArray = [];\n    let songDataArray = [];\n    let arr1 = [];\n    let arr2 = [];\n    let isLoggedin = false;\n    let gCode = \"\";\n\n    // useStates for storing data and sorted data from API calls\n    const [data, setData] = useState([])\n    const [displayData, setDisplayData] = useState([])\n  \n  // Request Spotify oAuth\n    function requestAuth(){\n        localStorage.setItem(\"clientID\", CLIENT_ID);\n        localStorage.setItem(\"clientSecret\", CLIENT_SECRET)\n        let url = `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&response_type=code&redirect_uri=${REDIRECT_URI}&show_dialog=true&scope=user-read-private user-read-email user-modify-playback-state user-read-playback-position user-library-read streaming user-read-playback-state user-read-recently-played playlist-read-private`;\n        window.location.href = url;\n    }\n\n    if(new URLSearchParams(window.location.search).get(\"code\")){\n        handleRedirect();\n        isLoggedin = true;\n\n    }\n\n    // Spotify oAuth\n    function handleRedirect(){\n        let code = null;\n        const queryString = window.location.search;\n        if (queryString.length > 0){\n            const urlParams = new URLSearchParams(queryString)\n            code = urlParams.get('code');\n            gCode = code;\n        }\n        let url = `grant_type=authorization_code&code=${code}&redirect_uri=${REDIRECT_URI}&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`\n        callAuthorizationApi(url)\n    }\n  \n\n    // Spotify oAuth continued - get accessToken\n    function callAuthorizationApi(){\n\n        let authParam = {\n            method: 'POST',\n            headers : {\n                'Content-Type' : 'application/x-www-form-urlencoded',\n                'Authorization' : 'Basic ' + btoa(CLIENT_ID + ':' + CLIENT_SECRET)\n            },\n            body : \"grant_type=authorization_code&code=\" + gCode + \"&redirect_uri=\" + REDIRECT_URI\n        };\n        fetch(\"https://accounts.spotify.com/api/token\", authParam)\n            .then(result => result.json())\n            .then((data) => {\n                accessToken = data.access_token;\n                localStorage.setItem(\"accessToken\", accessToken)\n                refreshToken = data.refresh_token;\n                localStorage.setItem(\"refreshToken\", refreshToken)\n            })\n            \n        \n        \n        handleGetData();\n        \n    }\n\n    // Series of API calls to retrieve all songs in a user's playlist, and corresponding song data\n    async function handleGetData() {\n        axios.get(\"https://api.spotify.com/v1/me/playlists\", {\n            headers: {\n            Authorization: \"Bearer \" + accessToken,\n            },\n        })\n\n        .then((data) => console.log(data))\n\n    };\n\n\n\n\n\n\n\n\n\nreturn (\n    <div className=\"App\">\n        <header className=\"App-header\">\n            {!isLoggedin &&\n                <div id=\"loginContainer\">\n                    <h1 id=\"welcomeMessage\" className=\"welcomeInfo\">Welcome to Moody!!</h1>\n                    <h3 className=\"welcomeInfo\">The app that determines which songs on Spotify to listen to based on your mood!!</h3>\n                    <h4 className=\"welcomeInfo\">Please login to your Spotify account to get started:</h4>\n                    <button id=\"loginButton\" onClick={requestAuth}>Login</button>\n                    <h6 className=\"welcomeInfo\">Note: This app uses Spotify's API and authentication to access your song data, please allow Moody permissions on the following screen</h6>\n\n                </div>\n\n            }\n            {isLoggedin && \n                <>\n                    <div id=\"header\">\n                    <button id=\"logoutButton\" onClick={logout}>Logout</button>\n                        <h1>Moody</h1>\n                        <div id=\"buttonContainer\" >\n                            <button id=\"happyButton\"  className=\"moodButton\" onClick={happyDisplay}>Happy</button>\n                            <button id=\"sadButton\" className=\"moodButton\" onClick={sadDisplay}>Sad</button>\n                            <button id=\"danceButton\" className=\"moodButton\" onClick={danceDisplay}>Dance</button>\n                            <button id=\"chillButton\" className=\"moodButton\" onClick={chillDisplay}>Chill</button>\n                        </div>\n                    </div>\n                        {\n                            displayData.map(song => (\n                                <div id=\"songDisplayContainer\">\n                                    <div id=\"songDisplay\">\n                                        <img id=\"albumArt\" src={ song.albumArt.url } />\n                                        <a href={ song.songHref } target=\"_blank\" id=\"songNameHref\"><p id=\"songName\">{ song.songName } - { song.artist }</p></a>\n                                    </div>\n                                </div>\n\n                            ))\n                        }\n                </>\n            }\n        </header>\n    </div>\n  );\n};\n\nexport default SpotifyAuth;\n\n\n\n\n\n\n\n// import React from \"react\";\n// import axios from \"axios\";\n// import { useState } from 'react'\n\n// // Main Component\n// function SpotifyAuth() {\n//     // Variables\n//     const CLIENT_SECRET = \"4da86a5ecc8043b89351f327c163334c\"\n//     const CLIENT_ID = \"b9c6e006ac214ba695f8e0f09d8dc8e0\";\n//     const REDIRECT_URI = \"http://localhost:3000\";\n//     const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\";\n//     const TOKEN = \"https://accounts.spotify.com/api/token\"\n//     let accessToken = \"\";\n//     let refreshToken = \"\";\n//     let songIDArray = [];\n//     let songDataArray = [];\n//     let arr1 = [];\n//     let arr2 = [];\n//     let isLoggedin = false;\n\n//     // useStates for storing data and sorted data from API calls\n//     const [data, setData] = useState([])\n//     const [displayData, setDisplayData] = useState([])\n  \n//   // Request Spotify oAuth\n//     function requestAuth(){\n//         localStorage.setItem(\"clientID\", CLIENT_ID);\n//         localStorage.setItem(\"clientSecret\", CLIENT_SECRET)\n//         let url = `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&response_type=code&redirect_uri=${REDIRECT_URI}&show_dialog=true&scope=user-read-private user-read-email user-modify-playback-state user-read-playback-position user-library-read streaming user-read-playback-state user-read-recently-played playlist-read-private`;\n//         window.location.href = url;\n//     }\n\n//     if(new URLSearchParams(window.location.search).get(\"code\")){\n//         handleRedirect();\n//         isLoggedin = true;\n\n//     }\n\n//     // Spotify oAuth\n//     function handleRedirect(){\n//         let code = null;\n//         const queryString = window.location.search;\n//         if (queryString.length > 0){\n//             const urlParams = new URLSearchParams(queryString)\n//             code = urlParams.get('code');\n//         }\n//         let url = `grant_type=authorization_code&code=${code}&redirect_uri=${REDIRECT_URI}&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`\n//         callAuthorizationApi(url)\n//     }\n  \n//     // Spotify oAuth continued\n//     function callAuthorizationApi(url){\n//         let xhr = new XMLHttpRequest();\n//         xhr.open(\"POST\", TOKEN, true)\n//         xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n//         xhr.setRequestHeader(\"Authorization\", \"Basic \" + btoa(CLIENT_ID + \":\" + CLIENT_SECRET))\n//         xhr.send(url)\n//         xhr.onload = handleAuthorizationResponse;\n//     }\n\n//     // Spotify oAuth continued - get accessToken\n//     function handleAuthorizationResponse(){\n//         if (this.status === 200){\n//             var data = JSON.parse(this.responseText);\n//             if (data.access_token.length > 0){\n//                 accessToken = data.access_token;\n//                 localStorage.setItem(\"accessToken\", accessToken)\n//             }\n//             if (data.refresh_token.length > 0){\n//                 refreshToken = data.refresh_token;\n//                 localStorage.setItem(\"refreshToken\", refreshToken)\n\n//             } \n//             handleGetData();\n//         }\n//     }\n\n//     // Series of API calls to retrieve all songs in a user's playlist, and corresponding song data\n//     async function handleGetData() {\n//         axios.get(\"https://api.spotify.com/v1/me/playlists\", {\n//             headers: {\n//             Authorization: \"Bearer \" + accessToken,\n//             },\n//         })\n//         .then((response) => {\n//             for (let i = 0; i < response.data.items.length; i++) {\n//             axios.get(response.data.items[i].tracks.href, {\n//                 headers: {\n//                 Authorization: \"Bearer \" + accessToken,\n//                 },\n//             })\n//             .then((response) => {\n//                 for(let i = 0; i < response.data.items.length; i++){\n//                 const songHref = response.data.items[i].track.href\n//                 if (songHref.includes(\"track\")){\n//                     let songID = response.data.items[i].track.id;\n//                     let songName = response.data.items[i].track.name;\n//                     let albumArt = response.data.items[i].track.album.images[2];\n//                     let artist = response.data.items[i].track.artists[0].name;\n//                     let songHref = `https://open.spotify.com/track/${songID}`\n//                     songIDArray.push({songID, songName, albumArt, artist, songHref});\n//                 }\n//                 };\n//             })\n//             }\n//         })\n//         setTimeout(getSongData, 1000)\n//     };\n\n//     // Get audio features for each of the songs - had to be seperated due to restrictions on API calls per second\n//     async function getSongData(){\n//         songDataArray = songIDArray.sort((a, b) => 0.5 - Math.random());\n//         songDataArray.splice(0, 50)\n//         if (songDataArray.length = 50){\n//             for(let i = 0; i < songDataArray.length; i++){\n//                 axios.get(\"https://api.spotify.com/v1/audio-features/\" + songDataArray[i].songID, {\n//                     headers: {\n//                     Authorization: \"Bearer \" + accessToken,\n//                     },\n//                 })\n//                 // Store danceability, energy, and valence values inside songDataArray\n//                 .then((response) => {\n//                     songDataArray[i].songDanceability = response.data.danceability;\n//                     songDataArray[i].songEnergy = response.data.energy;\n//                     songDataArray[i].songValence = response.data.valence;\n//                 })\n//             }\n//             setData(songDataArray)\n//         }\n//     }\n\n//     // Sort for happy mood\n//     function happyDisplay(){\n//         arr1 = [...data].sort((a, b) => b.songValence- a.songValence)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n\n//         setDisplayData(arr2)\n//     }\n\n//     // Sort for sad mood\n//     function sadDisplay(){\n//         arr1 = [...data].sort((a, b) => a.songValence- b.songValence)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n\n//         setDisplayData(arr2)\n//     }\n\n//     // Sort for dance mood\n//     function danceDisplay(){\n//         arr1 = [...data].sort((a, b) => b.songDanceability- a.songDanceability)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n\n//         setDisplayData(arr2)\n//     }\n\n//     // Sort for chill mood\n//     function chillDisplay(){\n//         arr1 = [...data].sort((a, b) => a.songDanceability- b.songDanceability)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n\n//         setDisplayData(arr2)\n//     }\n\n//     // Logout \n//     function logout(){\n//         isLoggedin = false;\n//         window.location.href = REDIRECT_URI;\n//         localStorage.setItem(\"accessToken\", \"\")\n//         localStorage.setItem(\"refreshToken\", \"\")\n//         localStorage.setItem(\"clientID\", \"\");\n//         localStorage.setItem(\"clientSecret\", \"\")\n//     }\n\n//     return (\n//     <div className=\"App\">\n//         <header className=\"App-header\">\n//             {!isLoggedin &&\n//                 <div id=\"loginContainer\">\n//                     <h1 id=\"welcomeMessage\" className=\"welcomeInfo\">Welcome to Moody!!</h1>\n//                     <h3 className=\"welcomeInfo\">The app that determines which songs on Spotify to listen to based on your mood!!</h3>\n//                     <h4 className=\"welcomeInfo\">Please login to your Spotify account to get started:</h4>\n//                     <button id=\"loginButton\" onClick={requestAuth}>Login</button>\n//                     <h6 className=\"welcomeInfo\">Note: This app uses Spotify's API and authentication to access your song data, please allow Moody permissions on the following screen</h6>\n\n//                 </div>\n\n//             }\n//             {isLoggedin && \n//                 <>\n//                     <div id=\"header\">\n//                     <button id=\"logoutButton\" onClick={logout}>Logout</button>\n//                         <h1>Moody</h1>\n//                         <div id=\"buttonContainer\" >\n//                             <button id=\"happyButton\"  className=\"moodButton\" onClick={happyDisplay}>Happy</button>\n//                             <button id=\"sadButton\" className=\"moodButton\" onClick={sadDisplay}>Sad</button>\n//                             <button id=\"danceButton\" className=\"moodButton\" onClick={danceDisplay}>Dance</button>\n//                             <button id=\"chillButton\" className=\"moodButton\" onClick={chillDisplay}>Chill</button>\n//                         </div>\n//                     </div>\n//                         {\n//                             displayData.map(song => (\n//                                 <div id=\"songDisplayContainer\">\n//                                     <div id=\"songDisplay\">\n//                                         <img id=\"albumArt\" src={ song.albumArt.url } />\n//                                         <a href={ song.songHref } target=\"_blank\" id=\"songNameHref\"><p id=\"songName\">{ song.songName } - { song.artist }</p></a>\n//                                     </div>\n//                                 </div>\n\n//                             ))\n//                         }\n//                 </>\n//             }\n//         </header>\n//     </div>\n//   );\n// };\n\n// export default SpotifyAuth;"],"mappings":"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ACE,QAAf;cAA0B,MAAM,EAAC,QAAjC;cAA0C,EAAE,EAAC,cAA7C;cAAA,uBAA4D;gBAAG,EAAE,EAAC,UAAN;gBAAA,WAAmBF,IAAI,CAACG,QAAxB,SAAuCH,IAAI,CAACI,MAA5C;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAA5D;cAAA;cAAA;cAAA;YAAA,QAFJ;UAAA;YAAA;YAAA;YAAA;UAAA;QADJ;UAAA;UAAA;UAAA;QAAA,QADJ,CAZZ;MAAA,gBAbR;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AA0CC;;GAxIQ3D,W;;KAAAA,W;AAwIR;AAED,eAAeA,WAAf,C,CAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}