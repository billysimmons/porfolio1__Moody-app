{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport { useState } from 'react'; // Main Component\n\nfunction SpotifyAuth() {\n  _s();\n\n  // Variables\n  const CLIENT_SECRET = \"4da86a5ecc8043b89351f327c163334c\";\n  const CLIENT_ID = \"b9c6e006ac214ba695f8e0f09d8dc8e0\";\n  const REDIRECT_URI = \"http://localhost:3000\";\n  const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\";\n  const TOKEN = \"https://accounts.spotify.com/api/token\";\n  let accessToken = \"\";\n  let refreshToken = \"\";\n  let songIDArray = [];\n  let songDataArray = [];\n  let arr1 = [];\n  let arr2 = [];\n  let isLoggedin = false; // useStates for storing data and sorted data from API calls\n\n  const [data, setData] = useState([]);\n  const [displayData, setDisplayData] = useState([]); // Request Spotify oAuth\n\n  function requestAuth() {\n    localStorage.setItem(\"clientID\", CLIENT_ID);\n    localStorage.setItem(\"clientSecret\", CLIENT_SECRET);\n    let url = `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&response_type=code&redirect_uri=${REDIRECT_URI}&show_dialog=true&scope=user-read-private user-read-email user-modify-playback-state user-read-playback-position user-library-read streaming user-read-playback-state user-read-recently-played playlist-read-private`;\n    window.location.href = url;\n  }\n\n  if (new URLSearchParams(window.location.search).get(\"code\")) {\n    handleRedirect();\n    isLoggedin = true;\n  } // Spotify oAuth\n\n\n  function handleRedirect() {\n    let code = null;\n    const queryString = window.location.search;\n\n    if (queryString.length > 0) {\n      const urlParams = new URLSearchParams(queryString);\n      code = urlParams.get('code');\n    }\n\n    let url = `grant_type=authorization_code&code=${code}&redirect_uri=${REDIRECT_URI}&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`;\n    callAuthorizationApi(url);\n  } // Spotify oAuth continued\n\n\n  function callAuthorizationApi(url) {\n    let xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", TOKEN, true);\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    xhr.setRequestHeader(\"Authorization\", \"Basic \" + btoa(CLIENT_ID + \":\" + CLIENT_SECRET));\n    xhr.send(url);\n    xhr.onload = handleAuthorizationResponse;\n  } // Spotify oAuth continued - get accessToken\n\n\n  function handleAuthorizationResponse() {\n    if (this.status === 200) {\n      var data = JSON.parse(this.responseText);\n\n      if (data.access_token.length > 0) {\n        accessToken = data.access_token;\n        localStorage.setItem(\"accessToken\", accessToken);\n      }\n\n      if (data.refresh_token.length > 0) {\n        refreshToken = data.refresh_token;\n        localStorage.setItem(\"refreshToken\", refreshToken);\n      }\n\n      handleGetData();\n    }\n  } // Series of API calls to retrieve all songs in a user's playlist, and corresponding song data\n\n\n  async function handleGetData() {\n    axios.get(\"https://api.spotify.com/v1/me\", {\n      headers: {\n        Authorization: \"Bearer \" + accessToken\n      }\n    }).then(response => {\n      for (let i = 0; i < response.data.items.length; i++) {\n        axios.get(response.data.items[i].tracks.href, {\n          headers: {\n            Authorization: \"Bearer \" + accessToken\n          }\n        }).then(response => {\n          console.log(response);\n        });\n      }\n    });\n  }\n\n  ;\n}\n\n_s(SpotifyAuth, \"jboDTUUme6DPXD+Rq5UGmyRacnw=\");\n\n_c = SpotifyAuth;\n;\nexport default SpotifyAuth; // import React from \"react\";\n// import axios from \"axios\";\n// import { useState } from 'react'\n// // Main Component\n// function SpotifyAuth() {\n//     // Variables\n//     const CLIENT_SECRET = \"4da86a5ecc8043b89351f327c163334c\"\n//     const CLIENT_ID = \"b9c6e006ac214ba695f8e0f09d8dc8e0\";\n//     const REDIRECT_URI = \"http://localhost:3000\";\n//     const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\";\n//     const TOKEN = \"https://accounts.spotify.com/api/token\"\n//     let accessToken = \"\";\n//     let refreshToken = \"\";\n//     let songIDArray = [];\n//     let songDataArray = [];\n//     let arr1 = [];\n//     let arr2 = [];\n//     let isLoggedin = false;\n//     // useStates for storing data and sorted data from API calls\n//     const [data, setData] = useState([])\n//     const [displayData, setDisplayData] = useState([])\n//   // Request Spotify oAuth\n//     function requestAuth(){\n//         localStorage.setItem(\"clientID\", CLIENT_ID);\n//         localStorage.setItem(\"clientSecret\", CLIENT_SECRET)\n//         let url = `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&response_type=code&redirect_uri=${REDIRECT_URI}&show_dialog=true&scope=user-read-private user-read-email user-modify-playback-state user-read-playback-position user-library-read streaming user-read-playback-state user-read-recently-played playlist-read-private`;\n//         window.location.href = url;\n//     }\n//     if(new URLSearchParams(window.location.search).get(\"code\")){\n//         handleRedirect();\n//         isLoggedin = true;\n//     }\n//     // Spotify oAuth\n//     function handleRedirect(){\n//         let code = null;\n//         const queryString = window.location.search;\n//         if (queryString.length > 0){\n//             const urlParams = new URLSearchParams(queryString)\n//             code = urlParams.get('code');\n//         }\n//         let url = `grant_type=authorization_code&code=${code}&redirect_uri=${REDIRECT_URI}&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`\n//         callAuthorizationApi(url)\n//     }\n//     // Spotify oAuth continued\n//     function callAuthorizationApi(url){\n//         let xhr = new XMLHttpRequest();\n//         xhr.open(\"POST\", TOKEN, true)\n//         xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n//         xhr.setRequestHeader(\"Authorization\", \"Basic \" + btoa(CLIENT_ID + \":\" + CLIENT_SECRET))\n//         xhr.send(url)\n//         xhr.onload = handleAuthorizationResponse;\n//     }\n//     // Spotify oAuth continued - get accessToken\n//     function handleAuthorizationResponse(){\n//         if (this.status === 200){\n//             var data = JSON.parse(this.responseText);\n//             if (data.access_token.length > 0){\n//                 accessToken = data.access_token;\n//                 localStorage.setItem(\"accessToken\", accessToken)\n//             }\n//             if (data.refresh_token.length > 0){\n//                 refreshToken = data.refresh_token;\n//                 localStorage.setItem(\"refreshToken\", refreshToken)\n//             } \n//             handleGetData();\n//         }\n//     }\n//     // Series of API calls to retrieve all songs in a user's playlist, and corresponding song data\n//     async function handleGetData() {\n//         axios.get(\"https://api.spotify.com/v1/me/playlists\", {\n//             headers: {\n//             Authorization: \"Bearer \" + accessToken,\n//             },\n//         })\n//         .then((response) => {\n//             for (let i = 0; i < response.data.items.length; i++) {\n//             axios.get(response.data.items[i].tracks.href, {\n//                 headers: {\n//                 Authorization: \"Bearer \" + accessToken,\n//                 },\n//             })\n//             .then((response) => {\n//                 for(let i = 0; i < response.data.items.length; i++){\n//                 const songHref = response.data.items[i].track.href\n//                 if (songHref.includes(\"track\")){\n//                     let songID = response.data.items[i].track.id;\n//                     let songName = response.data.items[i].track.name;\n//                     let albumArt = response.data.items[i].track.album.images[2];\n//                     let artist = response.data.items[i].track.artists[0].name;\n//                     let songHref = `https://open.spotify.com/track/${songID}`\n//                     songIDArray.push({songID, songName, albumArt, artist, songHref});\n//                 }\n//                 };\n//             })\n//             }\n//         })\n//         setTimeout(getSongData, 1000)\n//     };\n//     // Get audio features for each of the songs - had to be seperated due to restrictions on API calls per second\n//     async function getSongData(){\n//         songDataArray = songIDArray.sort((a, b) => 0.5 - Math.random());\n//         songDataArray.splice(0, 50)\n//         if (songDataArray.length = 50){\n//             for(let i = 0; i < songDataArray.length; i++){\n//                 axios.get(\"https://api.spotify.com/v1/audio-features/\" + songDataArray[i].songID, {\n//                     headers: {\n//                     Authorization: \"Bearer \" + accessToken,\n//                     },\n//                 })\n//                 // Store danceability, energy, and valence values inside songDataArray\n//                 .then((response) => {\n//                     songDataArray[i].songDanceability = response.data.danceability;\n//                     songDataArray[i].songEnergy = response.data.energy;\n//                     songDataArray[i].songValence = response.data.valence;\n//                 })\n//             }\n//             setData(songDataArray)\n//         }\n//     }\n//     // Sort for happy mood\n//     function happyDisplay(){\n//         arr1 = [...data].sort((a, b) => b.songValence- a.songValence)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n//         setDisplayData(arr2)\n//     }\n//     // Sort for sad mood\n//     function sadDisplay(){\n//         arr1 = [...data].sort((a, b) => a.songValence- b.songValence)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n//         setDisplayData(arr2)\n//     }\n//     // Sort for dance mood\n//     function danceDisplay(){\n//         arr1 = [...data].sort((a, b) => b.songDanceability- a.songDanceability)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n//         setDisplayData(arr2)\n//     }\n//     // Sort for chill mood\n//     function chillDisplay(){\n//         arr1 = [...data].sort((a, b) => a.songDanceability- b.songDanceability)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n//         setDisplayData(arr2)\n//     }\n//     // Logout \n//     function logout(){\n//         isLoggedin = false;\n//         window.location.href = REDIRECT_URI;\n//         localStorage.setItem(\"accessToken\", \"\")\n//         localStorage.setItem(\"refreshToken\", \"\")\n//         localStorage.setItem(\"clientID\", \"\");\n//         localStorage.setItem(\"clientSecret\", \"\")\n//     }\n//     return (\n//     <div className=\"App\">\n//         <header className=\"App-header\">\n//             {!isLoggedin &&\n//                 <div id=\"loginContainer\">\n//                     <h1 id=\"welcomeMessage\" className=\"welcomeInfo\">Welcome to Moody!!</h1>\n//                     <h3 className=\"welcomeInfo\">The app that determines which songs on Spotify to listen to based on your mood!!</h3>\n//                     <h4 className=\"welcomeInfo\">Please login to your Spotify account to get started:</h4>\n//                     <button id=\"loginButton\" onClick={requestAuth}>Login</button>\n//                     <h6 className=\"welcomeInfo\">Note: This app uses Spotify's API and authentication to access your song data, please allow Moody permissions on the following screen</h6>\n//                 </div>\n//             }\n//             {isLoggedin && \n//                 <>\n//                     <div id=\"header\">\n//                     <button id=\"logoutButton\" onClick={logout}>Logout</button>\n//                         <h1>Moody</h1>\n//                         <div id=\"buttonContainer\" >\n//                             <button id=\"happyButton\"  className=\"moodButton\" onClick={happyDisplay}>Happy</button>\n//                             <button id=\"sadButton\" className=\"moodButton\" onClick={sadDisplay}>Sad</button>\n//                             <button id=\"danceButton\" className=\"moodButton\" onClick={danceDisplay}>Dance</button>\n//                             <button id=\"chillButton\" className=\"moodButton\" onClick={chillDisplay}>Chill</button>\n//                         </div>\n//                     </div>\n//                         {\n//                             displayData.map(song => (\n//                                 <div id=\"songDisplayContainer\">\n//                                     <div id=\"songDisplay\">\n//                                         <img id=\"albumArt\" src={ song.albumArt.url } />\n//                                         <a href={ song.songHref } target=\"_blank\" id=\"songNameHref\"><p id=\"songName\">{ song.songName } - { song.artist }</p></a>\n//                                     </div>\n//                                 </div>\n//                             ))\n//                         }\n//                 </>\n//             }\n//         </header>\n//     </div>\n//   );\n// };\n// export default SpotifyAuth;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpotifyAuth\");","map":{"version":3,"names":["React","axios","useState","SpotifyAuth","CLIENT_SECRET","CLIENT_ID","REDIRECT_URI","AUTH_ENDPOINT","TOKEN","accessToken","refreshToken","songIDArray","songDataArray","arr1","arr2","isLoggedin","data","setData","displayData","setDisplayData","requestAuth","localStorage","setItem","url","window","location","href","URLSearchParams","search","get","handleRedirect","code","queryString","length","urlParams","callAuthorizationApi","xhr","XMLHttpRequest","open","setRequestHeader","btoa","send","onload","handleAuthorizationResponse","status","JSON","parse","responseText","access_token","refresh_token","handleGetData","headers","Authorization","then","response","i","items","tracks","console","log"],"sources":["/Users/billysimmons/Desktop/UNI/TRI 1 2022/2702 - Intelligent Media Systems/Assessment /Assignment 2/Assignment 2/Final /moody-final/moody-app/src/SpotifyAuth.jsx"],"sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { useState } from 'react'\n\n// Main Component\nfunction SpotifyAuth() {\n    // Variables\n    const CLIENT_SECRET = \"4da86a5ecc8043b89351f327c163334c\"\n    const CLIENT_ID = \"b9c6e006ac214ba695f8e0f09d8dc8e0\";\n    const REDIRECT_URI = \"http://localhost:3000\";\n    const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\";\n    const TOKEN = \"https://accounts.spotify.com/api/token\"\n    let accessToken = \"\";\n    let refreshToken = \"\";\n    let songIDArray = [];\n    let songDataArray = [];\n    let arr1 = [];\n    let arr2 = [];\n    let isLoggedin = false;\n\n    // useStates for storing data and sorted data from API calls\n    const [data, setData] = useState([])\n    const [displayData, setDisplayData] = useState([])\n  \n  // Request Spotify oAuth\n    function requestAuth(){\n        localStorage.setItem(\"clientID\", CLIENT_ID);\n        localStorage.setItem(\"clientSecret\", CLIENT_SECRET)\n        let url = `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&response_type=code&redirect_uri=${REDIRECT_URI}&show_dialog=true&scope=user-read-private user-read-email user-modify-playback-state user-read-playback-position user-library-read streaming user-read-playback-state user-read-recently-played playlist-read-private`;\n        window.location.href = url;\n    }\n\n    if(new URLSearchParams(window.location.search).get(\"code\")){\n        handleRedirect();\n        isLoggedin = true;\n\n    }\n\n    // Spotify oAuth\n    function handleRedirect(){\n        let code = null;\n        const queryString = window.location.search;\n        if (queryString.length > 0){\n            const urlParams = new URLSearchParams(queryString)\n            code = urlParams.get('code');\n        }\n        let url = `grant_type=authorization_code&code=${code}&redirect_uri=${REDIRECT_URI}&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`\n        callAuthorizationApi(url)\n    }\n  \n    // Spotify oAuth continued\n    function callAuthorizationApi(url){\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", TOKEN, true)\n        xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        xhr.setRequestHeader(\"Authorization\", \"Basic \" + btoa(CLIENT_ID + \":\" + CLIENT_SECRET))\n        xhr.send(url)\n        xhr.onload = handleAuthorizationResponse;\n    }\n\n    // Spotify oAuth continued - get accessToken\n    function handleAuthorizationResponse(){\n        if (this.status === 200){\n            var data = JSON.parse(this.responseText);\n            if (data.access_token.length > 0){\n                accessToken = data.access_token;\n                localStorage.setItem(\"accessToken\", accessToken)\n            }\n            if (data.refresh_token.length > 0){\n                refreshToken = data.refresh_token;\n                localStorage.setItem(\"refreshToken\", refreshToken)\n\n            } \n            handleGetData();\n        }\n    }\n\n    // Series of API calls to retrieve all songs in a user's playlist, and corresponding song data\n    async function handleGetData() {\n        axios.get(\"https://api.spotify.com/v1/me\", {\n            headers: {\n            Authorization: \"Bearer \" + accessToken,\n            },\n        })\n        .then((response) => {\n            for (let i = 0; i < response.data.items.length; i++) {\n            axios.get(response.data.items[i].tracks.href, {\n                headers: {\n                Authorization: \"Bearer \" + accessToken,\n                },\n            })\n            .then((response) => {\n                console.log(response);\n            })\n            }\n        })\n    };\n\n};\n\nexport default SpotifyAuth;\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React from \"react\";\n// import axios from \"axios\";\n// import { useState } from 'react'\n\n// // Main Component\n// function SpotifyAuth() {\n//     // Variables\n//     const CLIENT_SECRET = \"4da86a5ecc8043b89351f327c163334c\"\n//     const CLIENT_ID = \"b9c6e006ac214ba695f8e0f09d8dc8e0\";\n//     const REDIRECT_URI = \"http://localhost:3000\";\n//     const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\";\n//     const TOKEN = \"https://accounts.spotify.com/api/token\"\n//     let accessToken = \"\";\n//     let refreshToken = \"\";\n//     let songIDArray = [];\n//     let songDataArray = [];\n//     let arr1 = [];\n//     let arr2 = [];\n//     let isLoggedin = false;\n\n//     // useStates for storing data and sorted data from API calls\n//     const [data, setData] = useState([])\n//     const [displayData, setDisplayData] = useState([])\n  \n//   // Request Spotify oAuth\n//     function requestAuth(){\n//         localStorage.setItem(\"clientID\", CLIENT_ID);\n//         localStorage.setItem(\"clientSecret\", CLIENT_SECRET)\n//         let url = `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&response_type=code&redirect_uri=${REDIRECT_URI}&show_dialog=true&scope=user-read-private user-read-email user-modify-playback-state user-read-playback-position user-library-read streaming user-read-playback-state user-read-recently-played playlist-read-private`;\n//         window.location.href = url;\n//     }\n\n//     if(new URLSearchParams(window.location.search).get(\"code\")){\n//         handleRedirect();\n//         isLoggedin = true;\n\n//     }\n\n//     // Spotify oAuth\n//     function handleRedirect(){\n//         let code = null;\n//         const queryString = window.location.search;\n//         if (queryString.length > 0){\n//             const urlParams = new URLSearchParams(queryString)\n//             code = urlParams.get('code');\n//         }\n//         let url = `grant_type=authorization_code&code=${code}&redirect_uri=${REDIRECT_URI}&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`\n//         callAuthorizationApi(url)\n//     }\n  \n//     // Spotify oAuth continued\n//     function callAuthorizationApi(url){\n//         let xhr = new XMLHttpRequest();\n//         xhr.open(\"POST\", TOKEN, true)\n//         xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n//         xhr.setRequestHeader(\"Authorization\", \"Basic \" + btoa(CLIENT_ID + \":\" + CLIENT_SECRET))\n//         xhr.send(url)\n//         xhr.onload = handleAuthorizationResponse;\n//     }\n\n//     // Spotify oAuth continued - get accessToken\n//     function handleAuthorizationResponse(){\n//         if (this.status === 200){\n//             var data = JSON.parse(this.responseText);\n//             if (data.access_token.length > 0){\n//                 accessToken = data.access_token;\n//                 localStorage.setItem(\"accessToken\", accessToken)\n//             }\n//             if (data.refresh_token.length > 0){\n//                 refreshToken = data.refresh_token;\n//                 localStorage.setItem(\"refreshToken\", refreshToken)\n\n//             } \n//             handleGetData();\n//         }\n//     }\n\n//     // Series of API calls to retrieve all songs in a user's playlist, and corresponding song data\n//     async function handleGetData() {\n//         axios.get(\"https://api.spotify.com/v1/me/playlists\", {\n//             headers: {\n//             Authorization: \"Bearer \" + accessToken,\n//             },\n//         })\n//         .then((response) => {\n//             for (let i = 0; i < response.data.items.length; i++) {\n//             axios.get(response.data.items[i].tracks.href, {\n//                 headers: {\n//                 Authorization: \"Bearer \" + accessToken,\n//                 },\n//             })\n//             .then((response) => {\n//                 for(let i = 0; i < response.data.items.length; i++){\n//                 const songHref = response.data.items[i].track.href\n//                 if (songHref.includes(\"track\")){\n//                     let songID = response.data.items[i].track.id;\n//                     let songName = response.data.items[i].track.name;\n//                     let albumArt = response.data.items[i].track.album.images[2];\n//                     let artist = response.data.items[i].track.artists[0].name;\n//                     let songHref = `https://open.spotify.com/track/${songID}`\n//                     songIDArray.push({songID, songName, albumArt, artist, songHref});\n//                 }\n//                 };\n//             })\n//             }\n//         })\n//         setTimeout(getSongData, 1000)\n//     };\n\n//     // Get audio features for each of the songs - had to be seperated due to restrictions on API calls per second\n//     async function getSongData(){\n//         songDataArray = songIDArray.sort((a, b) => 0.5 - Math.random());\n//         songDataArray.splice(0, 50)\n//         if (songDataArray.length = 50){\n//             for(let i = 0; i < songDataArray.length; i++){\n//                 axios.get(\"https://api.spotify.com/v1/audio-features/\" + songDataArray[i].songID, {\n//                     headers: {\n//                     Authorization: \"Bearer \" + accessToken,\n//                     },\n//                 })\n//                 // Store danceability, energy, and valence values inside songDataArray\n//                 .then((response) => {\n//                     songDataArray[i].songDanceability = response.data.danceability;\n//                     songDataArray[i].songEnergy = response.data.energy;\n//                     songDataArray[i].songValence = response.data.valence;\n//                 })\n//             }\n//             setData(songDataArray)\n//         }\n//     }\n\n//     // Sort for happy mood\n//     function happyDisplay(){\n//         arr1 = [...data].sort((a, b) => b.songValence- a.songValence)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n\n//         setDisplayData(arr2)\n//     }\n\n//     // Sort for sad mood\n//     function sadDisplay(){\n//         arr1 = [...data].sort((a, b) => a.songValence- b.songValence)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n\n//         setDisplayData(arr2)\n//     }\n\n//     // Sort for dance mood\n//     function danceDisplay(){\n//         arr1 = [...data].sort((a, b) => b.songDanceability- a.songDanceability)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n\n//         setDisplayData(arr2)\n//     }\n\n//     // Sort for chill mood\n//     function chillDisplay(){\n//         arr1 = [...data].sort((a, b) => a.songDanceability- b.songDanceability)\n//         arr2 = [arr1[0], arr1[1], arr1[2], arr1[3], arr1[4]]\n\n//         setDisplayData(arr2)\n//     }\n\n//     // Logout \n//     function logout(){\n//         isLoggedin = false;\n//         window.location.href = REDIRECT_URI;\n//         localStorage.setItem(\"accessToken\", \"\")\n//         localStorage.setItem(\"refreshToken\", \"\")\n//         localStorage.setItem(\"clientID\", \"\");\n//         localStorage.setItem(\"clientSecret\", \"\")\n//     }\n\n//     return (\n//     <div className=\"App\">\n//         <header className=\"App-header\">\n//             {!isLoggedin &&\n//                 <div id=\"loginContainer\">\n//                     <h1 id=\"welcomeMessage\" className=\"welcomeInfo\">Welcome to Moody!!</h1>\n//                     <h3 className=\"welcomeInfo\">The app that determines which songs on Spotify to listen to based on your mood!!</h3>\n//                     <h4 className=\"welcomeInfo\">Please login to your Spotify account to get started:</h4>\n//                     <button id=\"loginButton\" onClick={requestAuth}>Login</button>\n//                     <h6 className=\"welcomeInfo\">Note: This app uses Spotify's API and authentication to access your song data, please allow Moody permissions on the following screen</h6>\n\n//                 </div>\n\n//             }\n//             {isLoggedin && \n//                 <>\n//                     <div id=\"header\">\n//                     <button id=\"logoutButton\" onClick={logout}>Logout</button>\n//                         <h1>Moody</h1>\n//                         <div id=\"buttonContainer\" >\n//                             <button id=\"happyButton\"  className=\"moodButton\" onClick={happyDisplay}>Happy</button>\n//                             <button id=\"sadButton\" className=\"moodButton\" onClick={sadDisplay}>Sad</button>\n//                             <button id=\"danceButton\" className=\"moodButton\" onClick={danceDisplay}>Dance</button>\n//                             <button id=\"chillButton\" className=\"moodButton\" onClick={chillDisplay}>Chill</button>\n//                         </div>\n//                     </div>\n//                         {\n//                             displayData.map(song => (\n//                                 <div id=\"songDisplayContainer\">\n//                                     <div id=\"songDisplay\">\n//                                         <img id=\"albumArt\" src={ song.albumArt.url } />\n//                                         <a href={ song.songHref } target=\"_blank\" id=\"songNameHref\"><p id=\"songName\">{ song.songName } - { song.artist }</p></a>\n//                                     </div>\n//                                 </div>\n\n//                             ))\n//                         }\n//                 </>\n//             }\n//         </header>\n//     </div>\n//   );\n// };\n\n// export default SpotifyAuth;"],"mappings":"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},"metadata":{},"sourceType":"module"}